#######
# Types
#######

type Beerer {
  beererID: ID!,
  beererName: String,
  location: String,
  description: String,
  website: String,
  picture: String,
  rated(first: Int = 5): [RateOutput]
  checked(first: Int = 5): [CheckOutput]
  friends(first: Int = 5): [FriendOutput]
}

type Beer {
  beerID: ID!,
  beerName: String,
  description: String,
  abv: Float,
  picture: String,
  brewery: Brewery,
  category: Category,
  style: Style
}

type Brewery {
  breweryID: ID!,
  breweryName: String,
  address1: String,
  city: String,
  state: String,
  zipCode: String,
  country: String,
  phoneNumber: String,
  website: String,
  description: String,
  geocode: Geocode
}

type Geocode {
  geocodeID: ID!,
  latitude: Float,
  longitude: Float
}

type Category {
  categoryID: ID!,
  categoryName: String
}

type Style {
  styleID: ID!,
  styleName: String
}

type Rate {
  rating: Float!
  comment: String
  createdAt: String
}

type Check {
  location: String
  price: Float
  createdAt: String
}

type FriendShip {
  since: String
}

type RateOutput {
  beer: Beer
  rate: Rate
}

type CheckOutput {
  beer: Beer
  check: Check
}

type FriendOutput {
  friend: Beerer
  friendship: FriendShip
}

#########
# Queries
#########

type Query {
  findBeerer(filter: FilterInput, first: Int = 10): [Beerer]
  findBeer(filter: FilterInput, first: Int = 10): [Beer]
}

###########
# Mutations
###########

type Mutation {
  rate(input: RateInput): Boolean
  check(input: CheckInput): Boolean
  addFriend(input: FriendInput): Boolean
}

########
# Inputs
########

input FilterInput {
  id: Int
  name: String
}

input RateInput {
  me: Int!
  beerID: Int!
  rating: Int!
  comment: String
}

input CheckInput {
  me: Int!
  beerID: Int!
  location: String!
  price: Float
}

input FriendInput {
  me: Int!
  friendID: Int!
}